#+TITLE: RForgey_linux emacs lisp initializations
#+OPTIONS: toc:nil num:nil ^:nil

* RForgey initializations
Personalization for me for rforgey-linux systems

** Personal defuns

*** Initial initializations
#+begin_src emacs-lisp
  (defvar ssmm/true-home (file-truename (getenv "HOME"))
       "As best as I can, the real, true pathname of my home directory."
       )


  ;; From http://stackoverflow.com/questions/5014246/how-to-capture-standard-output-of-a-shell-command-in-elisp
  (defun ssmm/shell-command-to-string (&rest cmd)
    "Removes trailing newline/CR"
    (replace-regexp-in-string "\r?\n$" ""
                              (shell-command-to-string (mapconcat 'identity cmd " "))))

#+end_src

** Initializations

*** Set variables

*** Terminal setup

*** UI setup
#+begin_src emacs-lisp
  (global-set-key (kbd "<home>") 'other-frame)
  (set-face-attribute 'default nil
                      :family "Inconsolata"
                      :height 120
                      :weight 'normal
                      :width 'normal)
  
  ;; Go to my main org file with C-x r j g
  (set-register ?g (cons 'file  (concat ssmm/true-home "/docs/org/ga.org")))
  
#+end_src


** Package setup
*** Workgroups2
#+begin_src emacs-lisp
    (defun ssmm-goto-workgroup (wg-name)
        (select-frame ssmm-frame-0)
        (wg-switch-to-workgroup (concat wg-name "s0"))
        (select-frame ssmm-frame-1)
        (wg-switch-to-workgroup (concat wg-name "s1"))
        )
      
    (defun ssmm-set-wg-keybindings ()
      (interactive)
      (global-set-key (kbd "s-<f1>") (lambda () (interactive) (ssmm-goto-workgroup "w1")))
      (global-set-key (kbd "s-<f2>") (lambda () (interactive) (ssmm-goto-workgroup "w2")))
      (global-set-key (kbd "s-<f3>") (lambda () (interactive) (ssmm-goto-workgroup "w3")))
      (global-set-key (kbd "s-<f4>") (lambda () (interactive) (ssmm-goto-workgroup "w4")))
      (global-set-key (kbd "s-<f5>") (lambda () (interactive) (ssmm-goto-workgroup "w5")))
      (global-set-key (kbd "s-<f6>") (lambda () (interactive) (ssmm-goto-workgroup "w6")))
      (global-set-key (kbd "s-<f7>") (lambda () (interactive) (ssmm-goto-workgroup "w7")))
      (global-set-key (kbd "s-<f8>") (lambda () (interactive) (ssmm-goto-workgroup "w8")))
      (global-set-key (kbd "s-<f9>") (lambda () (interactive) (ssmm-goto-workgroup "w9")))
      (global-set-key (kbd "s-<f10>") (lambda () (interactive) (ssmm-goto-workgroup "w10")))
      (global-set-key (kbd "s-<f11>") (lambda () (interactive) (ssmm-goto-workgroup "w11")))
      (global-set-key (kbd "s-<f12>") (lambda () (interactive) (ssmm-goto-workgroup "w12")))
      )
    
    (defun ssmm-save-wg-session ()
      (interactive)
      (wg-write-session-file wg-default-session-file)
      )
    
    (defun ssmm-setup-wg-frames ()
      "Starts workgroups from workgroups2, assuming 2 screens."
      (interactive)
      (setq ssmm-frame-0 (selected-frame))
      (other-frame 1)
      (setq ssmm-frame-1 (selected-frame))
      (other-frame 1)
      )
      
    (defun ssmm-start-workgroups ()
      "Starts workgroups from workgroups2, assuming 2 screens."
      (interactive)
      (make-frame)
      (setq ssmm-frame-0 (selected-frame))
      (other-frame 1)
      (setq ssmm-frame-1 (selected-frame))
      (other-frame 1)
    
      (ssmm-set-wg-keybindings)
      (setq wg-emacs-exit-save-behavior nil)
      (wg-find-session-file wg-default-session-file)
      (add-hook 'auto-save-hook #'ssmm-save-wg-session)
      (add-hook 'kill-emacs-hook #'ssmm-save-wg-session)
    
      (setq ssmm-frame-0 (selected-frame))
      (other-frame 1)
      (setq ssmm-frame-1 (selected-frame))
      (other-frame 1)
      (ssmm-goto-workgroup "w1")
      )
    
    (defun ssmm-setup-workgroups (arg)
      "Initialize workgroups from workgroups2, assuming 2 screens."
      (interactive "P")
      (if arg
          (delete-file wg-default-session-file t)
          )
    
      (if (= (length (visible-frame-list)) 1)
          (make-frame)
          )
    
      (setq ssmm-frame-0 (selected-frame))
      (other-frame 1)
      (setq ssmm-frame-1 (selected-frame))
      (other-frame 1)
    
      (if (not (file-exists-p wg-default-session-file))
          (progn
            ;;(pop-to-buffer "*scratch*")
                                            ;(delete-other-windows)
            (wg-create-workgroup "w1s0")
            (wg-create-workgroup "w2s0")
            (wg-create-workgroup "w3s0")
            (wg-create-workgroup "w4s0")
            (wg-create-workgroup "w5s0")
            (wg-create-workgroup "w6s0")
            (wg-create-workgroup "w7s0")
            (wg-create-workgroup "w8s0")
            (wg-create-workgroup "w9s0")
            (wg-create-workgroup "w10s0")
            (wg-create-workgroup "w11s0")
            (wg-create-workgroup "w12s0")
        
            (other-frame 1)
            ;;(pop-to-buffer "*scratch*")
            ;;(delete-other-windows)
            (setq ssmm-frame-1 (selected-frame))
            (message "0 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
            (wg-create-workgroup "w1s1")
            (wg-create-workgroup "w2s1")
            (wg-create-workgroup "w3s1")
            (wg-create-workgroup "w4s1")
            (wg-create-workgroup "w5s1")
            (wg-create-workgroup "w6s1")
            (wg-create-workgroup "w7s1")
            (wg-create-workgroup "w8s1")
            (wg-create-workgroup "w9s1")
            (wg-create-workgroup "w10s1")
            (wg-create-workgroup "w11s1")
            (wg-create-workgroup "w12s1")
            (message "1 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
            (other-frame 1)
            ))
  
      (ssmm-set-wg-keybindings)
      (message "2 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
      (if (not (file-exists-p wg-default-session-file))
          (progn
            (wg-save-frames)
            (wg-write-session-file wg-default-session-file)
            ))
      ;;(wg-find-session-file wg-default-session-file)
      (add-hook 'auto-save-hook #'ssmm-save-wg-session)
      (add-hook 'kill-emacs-hook #'ssmm-save-wg-session)
      (message "3 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
      )
    
    ;; (defun ssmm-setup-workgroups ()
    ;;   "Initialize workgroups from workgroups2, assuming 2 screens."
    ;;   (interactive)
    ;;   (pop-to-buffer "*scratch*")
    ;;   ;(delete-other-windows)
    ;;   (setq ssmm-frame-0 (selected-frame))
    ;;   (wg-create-workgroup "w1s0")
    ;;   (wg-create-workgroup "w2s0")
    ;;   (wg-create-workgroup "w3s0")
    ;;   (wg-create-workgroup "w4s0")
    ;;   (wg-create-workgroup "w5s0")
    ;;   (wg-create-workgroup "w6s0")
    ;;   (wg-create-workgroup "w7s0")
    ;;   (wg-create-workgroup "w8s0")
    ;;   (wg-create-workgroup "w9s0")
    ;;   (wg-create-workgroup "w10s0")
    ;;   (wg-create-workgroup "w11s0")
    ;;   (wg-create-workgroup "w12s0")
        
    ;;   (make-frame)
    ;;   (other-frame 1)
    ;;   (pop-to-buffer "*scratch*")
    ;;   ;(delete-other-windows)
    ;;   (setq ssmm-frame-1 (selected-frame))
    ;;   (message "0 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
    ;;   (wg-create-workgroup "w1s1")
    ;;   (wg-create-workgroup "w2s1")
    ;;   (wg-create-workgroup "w3s1")
    ;;   (wg-create-workgroup "w4s1")
    ;;   (wg-create-workgroup "w5s1")
    ;;   (wg-create-workgroup "w6s1")
    ;;   (wg-create-workgroup "w7s1")
    ;;   (wg-create-workgroup "w8s1")
    ;;   (wg-create-workgroup "w9s1")
    ;;   (wg-create-workgroup "w10s1")
    ;;   (wg-create-workgroup "w11s1")
    ;;   (wg-create-workgroup "w12s1")
    ;;   (message "1 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
    ;;   (other-frame 1)
    
    ;;   (ssmm-set-wg-keybindings)
    ;;   (message "2 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
    ;;   (wg-save-frames)
    ;;   (wg-write-session-file wg-default-session-file)
    ;;   ;;(wg-find-session-file wg-default-session-file)
    ;;   (add-hook 'auto-save-hook #'ssmm-save-wg-session)
    ;;   (add-hook 'kill-emacs-hook #'ssmm-save-wg-session)
    ;;   (message "3 ssmm-frame-0 is %s frame-1 is %s" ssmm-frame-0 ssmm-frame-1)
    ;;   )
    
#+end_src



*** Org mode

**** Org agenda

#+begin_src emacs-lisp
(setq org-agenda-files (concat ssmm-orgfile-dir "/org-agenda-files.txt"))
;; Use (bash script) scr-update-org-agenda-files to update org agenda files
                                        ;(setq org-agenda-files (file-expand-wildcards (concat ssmm/true-home "/scr/*/testscr/*.org")))
                                        ;(add-to-list 'org-agenda-files (concat ssmm/true-home "/docs/org/ga.org"))

#+end_src

**** Capturing

#+begin_src emacs-lisp

  (setq org-capture-templates '(("t" "Todo" entry (file+datetree (concat ssmm-orgfile-dir "/" ssmm-organizer-file))
                                 "* TODO %?%t\nEntered on %u\n  %i\n")
                                ("j" "Journal" entry (file+datetree (concat ssmm-orgfile-dir "/" ssmm-organizer-file))
                                 "* %?\nEntered on %T\n  %i\n" :clock-keep t)
                                ))
#+end_src

