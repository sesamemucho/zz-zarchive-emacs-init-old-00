#+TITLE: Bob Forgey's Emacs configuration
#+OPTIONS: toc:2 h:4 ^:nil

#+begin_quote
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

* Introduction
These configuration files are inspired by eschulte's org-mode-wrapped
[[http://github.com/eschulte/emacs24-starter-kit/][emacs24-starter-kit]], Sacha Chua's [[http://pages.sachacua.com/.emacs.d/Sacha.html][single-file org-bable configuration]],
and skeeto's [[https://github.com/skeeto/dotfiles][package handling configuration]].

** Installation

1. Install Emacs version 24 or greater.

2. clone or checkout this repo (TBD)

3. Move the resulting directory to =~/.emacs.d= [1]

4. Launch Emacs

The configuration will automatically pull down and update packages as needed.

* Implementation

** Emacs first-stage initialization

*** Setup

This is for values that should be set before anything else.

#+begin_src emacs-lisp
;(setq debug-on-error t)
  ;;(set-default-font "-unknown-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")
    (add-to-list 'load-path "~/.emacs.d/lisp")
    
    ;;; Turn off the annoying crap immediately
    (menu-bar-mode -1)
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (blink-cursor-mode -1)
    (electric-indent-mode -1)
    (setq backup-inhibited t
          auto-save-default nil
          inhibit-startup-message t
          initial-scratch-message nil
          wdired-allow-to-change-permissions t
          dabbrev-case-distinction nil
          dabbrev-case-fold-search nil
          echo-keystrokes 0.1
          delete-active-region nil
          vc-follow-symlinks t
          disabled-command-function nil
          custom-file (make-temp-file "emacs-custom")
          truncate-lines t)
    (add-hook 'dired-mode-hook #'toggle-truncate-lines)
    (defalias 'yes-or-no-p 'y-or-n-p)
  
   ;;; Packages
  
   (require 'package)
   (require 'package-helper)
  
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (setq package-enable-at-startup nil)
  (setq package-blacklist '(batch-mode))
  (package-initialize)
#+end_src

*** Basics
This code should be executed before any customization files are loaded.

- Load path etc.
  #+begin_src emacs-lisp
    ;;(add-to-list 'load-path config-dir)
    (setq autoload-file (concat config-dir "loaddefs.el"))
    (setq package-user-dir (concat config-dir "elpa"))
    (setq custom-file (concat config-dir "custom.el"))
  #+end_src

- Compile bare elisp files
#+begin_src emacs-lisp
(byte-recompile-directory "~/.emacs.d/lisp/" 0)
;;(byte-recompile-directory "~/.emacs.d/etc/" 0)
#+end_src

*** Settings from M-x customize
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src


** Universal settings
*** Set variables
#+begin_src emacs-lisp
  (defvar ssmm/true-home (file-truename "~/"))
#+end_src


*** Align your code in a pretty way.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

*** Completion that uses many different methods to find options.
#+begin_src emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

*** Use regex searches by default.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

*** File finding
#+begin_src emacs-lisp 
;   (global-set-key (kbd "C-c r") 'revert-buffer)
;   (global-set-key (kbd "C-x C-b") 'ibuffer)
;   (global-set-key (kbd "C-x f") 'recentf-ido-find-file)  
#+end_src

*** Window switching. (C-x o goes to the next window)
#+begin_src emacs-lisp 
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
#+end_src

*** Help should search more than just commands
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-h a") 'apropos)
#+end_src


** Patches

#+begin_src emacs-lisp
;; From https://bbs.archlinux.org/viewtopic.php?id=190497
    (with-package* epg
(defun epg--list-keys-1 (context name mode)
  (let ((args (append (if (epg-context-home-directory context)
			  (list "--homedir"
				(epg-context-home-directory context)))
		      '("--with-colons" "--no-greeting" "--batch"
			"--with-fingerprint" "--with-fingerprint")
		      (unless (eq (epg-context-protocol context) 'CMS)
			'("--fixed-list-mode"))))
	(list-keys-option (if (memq mode '(t secret))
			      "--list-secret-keys"
			    (if (memq mode '(nil public))
				"--list-keys"
			      "--list-sigs")))
	(coding-system-for-read 'binary)
	keys string field index)
    (if name
	(progn
	  (unless (listp name)
	    (setq name (list name)))
	  (while name
	    (setq args (append args (list list-keys-option (car name)))
		  name (cdr name))))
      (setq args (append args (list list-keys-option))))
    (with-temp-buffer
      (apply #'call-process
	     (epg-context-program context)
	     nil (list t nil) nil args)
      (goto-char (point-min))
      (while (re-search-forward "^[a-z][a-z][a-z]:.*" nil t)
	(setq keys (cons (make-vector 15 nil) keys)
	      string (match-string 0)
	      index 0
	      field 0)
	(while (and (< field (length (car keys)))
		    (eq index
			(string-match "\\([^:]+\\)?:" string index)))
	  (setq index (match-end 0))
	  (aset (car keys) field (match-string 1 string))
	  (setq field (1+ field))))
      (nreverse keys)))))
#+end_src

** UI settings
*** Terminal setup
For working in xterm: XTERM=xterm-256color

#+begin_src emacs-lisp
  (defadvice terminal-init-xterm (after select-shift-up activate)
    (define-key input-decode-map "\e[1;2A" [S-up])
    (define-key input-decode-map "\e[1;2B" [S-down])
    (define-key input-decode-map "\e[1;2C" [S-right])
    (define-key input-decode-map "\e[1;2D" [S-left])
    (define-key input-decode-map "\e[1;5A" [C-up])
    (define-key input-decode-map "\e[1;5B" [C-down])
    (define-key input-decode-map "\e[1;5C" [C-right])
    (define-key input-decode-map "\e[1;5D" [C-left])
    (define-key input-decode-map "\e[1;3A" [M-up])
    (define-key input-decode-map "\e[1;3B" [M-down])

    (define-key input-decode-map "\e[1;3C" [M-right])
    (define-key input-decode-map "\e[1;3D" [M-left])
    )
#+end_src

*** UI setup

#+begin_src emacs-lisp
  (with-package* zenburn-theme
    (load-theme 'zenburn t))

    ;; (with-package* smart-mode-line
    ;;   (setq sml/apply-theme 'dark)
    ;;   (setq sml/shorten-directory t)
    ;;   (setq sml/shorten-modes t)
    ;;   (setq sml/name-width 40)
    ;;   (setq sml/mode-width 'full)
    ;;   ;;(add-hook 'after-init-hook 'sml/setup nil)
    ;;   (add-hook 'after-init-hook (lambda () (message "Goodbye from init-hook")) t)
    ;;   )

  ;; Go backwards through windows
  (global-set-key (kbd "C-x p") (lambda () (interactive) (other-window -1)))

  ;; C-x C-c is bad bad bad
  (global-unset-key (kbd "C-x C-c"))
  (global-set-key (kbd "C-x C-c C-c") 'save-buffers-kill-terminal)
  (setq tab-width 3)
#+end_src

** defuns
*** recentf-ido-find-file
#+srcname: starter-kit-recentf-ido-find-file
#+begin_src emacs-lisp 
;   (defun recentf-ido-find-file () 
;     "Find a recent file using Ido." 
;     (interactive) 
;     (let* ((file-assoc-list 
;             (mapcar (lambda (x) 
;                       (cons (file-name-nondirectory x) 
;                             x)) 
;                     recentf-list)) 
;            (filename-list 
;             (remove-duplicates (mapcar #'car file-assoc-list) 
;                                :test #'string=)) 
;            (filename (ido-completing-read "Choose recent file: " 
;                                           filename-list 
;                                           nil 
;                                           t))) 
;       (when filename 
;         (find-file (cdr (assoc filename 
;                                file-assoc-list)))))) 
#+end_src 

*** make-repeatable-command
From emacs prelude-core.
#+begin_src emacs-lisp

(require 'repeat)

(defun make-repeatable-command (cmd)
  "Returns a new command that is a repeatable version of CMD.
The new command is named CMD-repeat.  CMD should be a quoted
command.

This allows you to bind the command to a compound keystroke and
repeat it with just the final key.  For example:

  (global-set-key (kbd \"C-c a\") (make-repeatable-command 'foo))

will create a new command called foo-repeat.  Typing C-c a will
just invoke foo.  Typing C-c a a a will invoke foo three times,
and so on."
  (fset (intern (concat (symbol-name cmd) "-repeat"))
        `(lambda ,(help-function-arglist cmd) ;; arg list
           ,(format "A repeatable version of `%s'." (symbol-name cmd)) ;; doc string
           ,(interactive-form cmd) ;; interactive form
           ;; see also repeat-message-function
           (setq last-repeatable-command ',cmd)
           (repeat nil)))
  (intern (concat (symbol-name cmd) "-repeat")))

#+end_src

*** ssmm/goto-file-line-other-window
Given a string in a buffer that looks like "filename:linenumber", go there.

#+begin_src emacs-lisp
  (defun ssmm/goto-file-line-other-window ()
    "Given a string in a buffer that looks like 'filename:linenumber', go there."
    (interactive)
    (beginning-of-thing 'filename)
    (and (looking-at "\\([-a-zA-Z._0-9/]+\\):\\([0-9]+\\)")
     (let ((filename (match-string 1))
           (line_num (string-to-number (match-string 2))))
       (find-file-other-window filename)
       (goto-line line_num)
       )))

  (global-set-key (kbd "C-<kp-home>") 'ssmm/goto-file-line-other-window)

#+end_src

*** Copy characters from previous line
From emacswiki

#+begin_src emacs-lisp
  (autoload 'copy-from-above-command "misc"
    "Copy characters from previous nonblank line, starting just above point.

    \(fn &optional arg)"
    'interactive)

  (global-set-key [f6] (lambda ()
                         (interactive)
                         (copy-from-above-command 1)))
#+end_src

*** Default buffer

#+begin_src emacs-lisp
;;(setq ssmm-default-buffer "iff_config.c")
(defun ssmm-goto-default-buffer ()
  (interactive)
  (switch-to-buffer ssmm-default-buffer))
(global-set-key (kbd "C-'") 'ssmm-goto-default-buffer)
#+end_src

*** Working with multiple screens

#+begin_src emacs-lisp
  (defun ssmm-setup-frames ()
   (interactive)
   ;;(make-frame-on-display ":0.1")
   (make-frame)
   ;(make-frame-on-display "rforgey-windows:0.0")
   ;(make-frame-on-display "rforgey-windows:0.1")
   )
  ;;(defun ssmm-a-setup-frames ()
  ;; (interactive)
  ;; (pop-to-buffer "*scratch*")
  ;; (delete-other-windows)
  ;; (setq frame0 (selected-frame))
  ;; (make-frame-on-display ":0.1")
  ;; (pop-to-buffer "*scratch*")
  ;; (setq frame1 (selected-frame))
  ;; (frame-configuration-to-register ?0)
  ;; (frame-configuration-to-register ?1)
  ;; (frame-configuration-to-register ?2)
  ;; (frame-configuration-to-register ?3)
  ;; (frame-configuration-to-register ?4)
  ;; (frame-configuration-to-register ?5)
  ;; )
  
#+end_src

*** CamelCase

#+begin_src emacs-lisp
  ;; These three defuns started out from http://www.emacswiki.org/CamelCase
  (defun mapcar-head (fn-head fn-rest list)
    "Like MAPCAR, but applies a different function to the first element."
    (if list
        (cons (funcall fn-head (car list)) (mapcar fn-rest (cdr list)))))

  (defun camelize (s)
    "Convert string S (with spaces or _) to CamelCase string."
    (mapconcat 'identity (mapcar
                          '(lambda (word) (capitalize (downcase word)))
                          (split-string s "[ _]+")) ""))

  (defun camelize-method (s)
    "Convert string S (with spaces or _) to camelCase string."
    (mapconcat 'identity (mapcar-head
                          '(lambda (word) (downcase word))
                          '(lambda (word) (capitalize (downcase word)))
                          (split-string s "[ _]+")) ""))

  (defun camelCase (start end)
    "Coverts region to camelCase."
    (interactive "r")
    (let* ((str (buffer-substring-no-properties start end))
           (ccstr (camelize-method str))
           )
      (delete-region start end)
      (insert ccstr)
      )
    )

  (defun CamelCase (start end)
    "Coverts region to CamelCase."
    (interactive "r")
    (let* ((str (buffer-substring-no-properties start end))
           (ccstr (camelize str))
           )
      (delete-region start end)
      (insert ccstr)
      )
    )

  ;; From http://stackoverflow.com/questions/9288181/converting-from-camel-case-to-in-emacs
  (defun un-camelcase (start end)
    "Converts CamelCase region to underscores."
    (interactive "r")
    (replace-regexp "\\([A-Z]\\)" "_\\1" nil start end)
    (downcase-region start end)
  )

  (defun un-camelcase-word-at-point ()
    "un-camelcase word at point."
    (interactive)
    (save-excursion
      (let ((bounds (bounds-of-thing-at-point 'word)))
        (replace-regexp "\\([A-Z]\\)" "_\\1" nil (1+ (car bounds)) (cdr bounds))
        (downcase-region (car bounds) (cdr bounds))
        )
      )
    )
#+end_src


** Registers
Registers allow you to jump to a file or other location quickly. Use
=C-x r j= followed by the letter of the register (i for =init.el=, r
for this file) to jump to it.

You should add registers here for the files you edit most often.

#+begin_src emacs-lisp :results silent
  (dolist
      (r `((?i (file . ,(concat config-dir "init.el")))
           (?I (file . ,(let* ((user user-login-name)
                               (org (expand-file-name (concat user ".org") config-dir))
                               (el  (expand-file-name (concat user ".el") config-dir))
                               (dir (expand-file-name user config-dir)))
                          (cond
                           ((file-exists-p org) org)
                           ((file-exists-p el)  el)
                           (t dir)))))
           (?s (file . ,(concat config-dir "config.org")))
           ))
    (set-register (car r) (cadr r)))
#+end_src

** Miscellaneous

*** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

*** Save a list of recent files visited.
#+begin_src emacs-lisp 
(recentf-mode 1)
#+end_src emacs-lisp

*** Highlight matching parentheses when the point is on them.
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

*** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** Don't clutter up directories with files~
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the starter kit.
Nope; put them in /tmp... Use 'em or lose 'em. If it's important, use
git.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("/tmp")))
#+end_src

** Browser
Use EWW for browsing from Emacs
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

** Org mode
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
#+begin_src emacs-lisp
  (define-key global-map "\C-ca" 'org-agenda)
#+end_src

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.  See
[[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
#+begin_src emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
#+end_src

For convenience, inside code blocks indent according to the block mode:
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

**** General org-y stuff

#+begin_src emacs-lisp

  ;; Automatically tracks when TODO items are DONEd.
  (setq org-log-done 'time)

  ;; A default name to give context to some of the elisp farther down.
  ;; It generally gets changed in a system or user file.
  (setq ssmm-org-main-file (expand-file-name "~/org/organizer.org"))

    (defun ssmm-org-make-checkbox ()
      "Make this line into a checkbox"
      (interactive)
      (beginning-of-line)
      (insert " - [ ] "))

    (defun ssmm-org-auto-fill ()
      (if (string-match-p "^[0-9]+\.org" (buffer-name)) (auto-fill-mode 1))
      )

    (defun my-org-mode-hook ()
      (local-set-key (kbd "C-c C-<f9>") 'ssmm-org-make-checkbox)
      (local-set-key (kbd "C-<f9>") 'org-metaright)
      (ssmm-org-auto-fill)
      )

    (add-hook 'org-mode-hook 'my-org-mode-hook t)
    ;(setq prelude-org-mode-hook nil)

    (defun ssmm/org-open-other-frame ()
      "Jump to bookmark in another frame. See `bookmark-jump' for more."
      (interactive)
      (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
        (org-open-at-point)))

#+end_src

**** Org agenda

**** Capturing

#+begin_src emacs-lisp
    (setq org-capture-templates '(("t" "Todo" entry (file+datetree ssmm-org-main-file)
                                   "* TODO %?%t\nEntered on %u\n  %i\n")
                                  ("j" "Journal" entry (file+datetree ssmm-org-main-file)
                                   "* %?\nEntered on %T\n  %i\n" :clock-keep t)
                                  ("p" "New project entry" entry (file+olp ssmm-org-main-file "Projects")
                                   "* %?\nEntered on %T\n" :unnarrowed t)
                                  ))

    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)

  (defun ssmm-get-projects ()
  "Get a list of current projects.
   This will be a list of the 2nd-level headings under a 1st-level
   heading named 'Projects', in `ssmm-org-main-file'.
   "
    (interactive)
    (with-current-buffer (file-name-nondirectory ssmm-org-main-file)
      (org-element-map (org-element-parse-buffer) 'headline
        (lambda (headline)
          (let* ((parent (org-element-property :parent headline))
                 (foo1 (org-element-property :title parent)))
                                          ;(and foo1 (message (format "Got %s" (substring-no-properties (car foo1)))))
            (and (eq (org-element-type parent) 'headline)
                 (string= (org-element-property :raw-value parent) "Projects")
                 (= (org-element-property :level parent) 1)
                 (org-element-property :raw-value headline)
                 )))))
    )


#+end_src

*** Org-Mode Hook -- Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

*** Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

To use, type (say) "<l<TAB>" on a blank line to get an empty elisp
code block.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
  (setq org-structure-template-alist
     '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
       ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
       ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
       ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
       ("V" "#+BEGIN_VERBATIM\n?\n#+END_VERBATIM" "<verbatim>\n?\n</verbatim>")
       ("c" "#+BEGIN_CENTER\n?\n#+END_CENTER" "<center>\n?\n</center>")
       ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
       ("L" "#+LaTeX: " "<literal style=\"latex\">?</literal>")
       ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
       ("H" "#+HTML: " "<literal style=\"html\">?</literal>")
       ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII" "")
       ("A" "#+ASCII: " "")
       ("i" "#+INDEX: ?" "#+INDEX: ?")
       ("I" "#+INCLUDE: %file ?" "<include file=%file markup=\"?\">")))
#+end_src

*** Code blocks
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (plantuml . t)
     (python . t)
     (dot . t)
     (shell . t)
     (screen . t)
     ))
  (require 'ob-dot)
#+end_src

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

*** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

*** org2jekyll
   :PROPERTIES:
   :CUSTOM_ID: org-to-jekyll-blog
   :END:
The org2jekyll package allows publishing org-mode articles to a jekyll
blog, without having to use any jekyll constructs. I've added a fix to
correct the link handling of generated images.

#+begin_src emacs-lisp
  (with-package* org2jekyll

    (require 'ox-publish)
    (require 'ox-html)

    (defun my-org-html-publish-to-html (plist filename pub-dir)
      (save-excursion
        (find-file (org-html-publish-to-html plist filename pub-dir))
        (while (re-search-forward "src=\"img" nil t)
          (replace-match "src=\"/img"))
        (basic-save-buffer)
        (kill-buffer)
        )
      )

    (defun org-html--svg-image (source attributes info)
      "Return \"object\" appropriate for embedding svg file SOURCE
      with assoicated ATTRIBUTES. INFO is a plist used as a
      communication channel.

      The special attribute \"fallback\" can be used to specify a fallback
      image file to use if the object embedding is not supported."
      (let ((fallback (plist-get attributes :fallback))
            (attrs (org-html--make-attribute-string
                    (plist-put attributes :fallback nil))))
        (format "<object type=\"image/svg+xml\" data=\"/%s\" %s>\n%s</object>"
                source attrs (org-html-close-tag
                              "img" (format "src=\"/%s\" %s" source attrs) info))))

    (defun org-html--format-image (source attributes info)
      "Return \"img\" tag with given SOURCE and ATTRIBUTES.
    SOURCE is a string specifying the location of the image.
    ATTRIBUTES is a plist, as returned by
    `org-export-read-attribute'.  INFO is a plist used as
    a communication channel."
      (if (string= "svg" (file-name-extension source))
          (org-html--svg-image source attributes info)
        (org-html-close-tag
         "img"
         (org-html--make-attribute-string
          (org-combine-plists
           (list :src (format "/%s" source)
                 :alt (if (string-match-p "^ltxpng/" source)
                          (org-html-encode-plain-text
                           (org-find-text-property-in-string 'org-latex-src source))
                        (file-name-nondirectory source)))
           attributes))
         info)))

    ;; These were set with 'custom-set-variables', but the custom file was
    ;; read before org2jekyll was loaded, and it barfed at
    ;; 'org2jekyll-input-directory' being undefined. RSF 2016-02-13

    (setq org2jekyll-blog-author "you"
          org2jekyll-source-directory (expand-file-name "~/org/blog")
          org2jekyll-jekyll-directory (expand-file-name "~/public_jekyll")
          org2jekyll-jekyll-drafts-dir ""
          org2jekyll-jekyll-posts-dir "_posts/"

          )
    (defun my-org2jekyll-mode ()
      (org-mode)
      (org2jekyll-mode)
      )

    (add-to-list 'auto-mode-alist `(,(concat org2jekyll-source-directory "/.*\\.org$") . my-org2jekyll-mode))

    (defun ssmm-setup-org-publish-alist ()
      (setq org-publish-project-alist `(("default"
                                         :base-directory ,(org2jekyll-input-directory)
                                         :base-extension "org"
                                         :publishing-directory ,(org2jekyll-output-directory "")
                                         :publishing-function my-org-html-publish-to-html
                                         :headline-levels 4
                                         :section-numbers nil
                                         :with-toc nil
                                         :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
                                         :html-preamble t
                                         :recursive t
                                         :make-index t
                                         :html-extension "html"
                                         :body-only t)
                                        ("post"
                                         :base-directory ,(org2jekyll-input-directory)
                                         :base-extension "org"
                                         :publishing-directory ,(org2jekyll-output-directory org2jekyll-jekyll-posts-dir)
                                         :publishing-function my-org-html-publish-to-html
                                          ;:publishing-function org-html-publish-to-html
                                         :headline-levels 4
                                         :section-numbers nil
                                         :with-toc nil
                                         :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
                                         :html-preamble t
                                         :recursive t
                                         :make-index t
                                         :html-extension "html"
                                         :body-only t)
                                        ("images"
                                         :base-directory ,(org2jekyll-input-directory "img")
                                         :base-extension "jpg\\|gif\\|png\\|svg"
                                         :publishing-directory ,(org2jekyll-output-directory "img")
                                         :publishing-function org-publish-attachment
                                         :recursive t)
                                        ("images-old"
                                         :base-directory ,(org2jekyll-input-directory "/img")
                                         :base-extension "jpg\\|gif\\|png\\|svg"
                                         :publishing-directory ,(org2jekyll-output-directory "/img")
                                         :publishing-function org-publish-attachment
                                         :recursive t)
                                        ("js"
                                         :base-directory ,(org2jekyll-input-directory "js")
                                         :base-extension "js"
                                         :publishing-directory ,(org2jekyll-output-directory "js")
                                         :publishing-function org-publish-attachment
                                         :recursive t)
                                        ("css"
                                         :base-directory ,(org2jekyll-input-directory "css")
                                         :base-extension "css\\|el"
                                         :publishing-directory ,(org2jekyll-output-directory "css")
                                         :publishing-function org-publish-attachment
                                         :recursive t)
                                        ("web" :components ("post" "images" "js" "css")))
            ))

    (ssmm-setup-org-publish-alist)

    )

#+end_src
** Ack-and-a-half
#+begin_src emacs-lisp
    (with-package ack-and-a-half
      (add-to-list 'load-path "/path/to/ack-and-a-half")
       (require 'ack-and-a-half)
       (defalias 'ack 'ack-and-a-half)
       (defalias 'ack-same 'ack-and-a-half-same)
       (defalias 'ack-find-file 'ack-and-a-half-find-file)
       (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
  )
#+end_src
** C mode
#+begin_src emacs-lisp
  (with-package c-mode
    (c-add-style "std-style"
                 '((c-basic-offset . 2)     ; Guessed value
                   (c-offsets-alist
                    (arglist-cont . 0)      ; Guessed value
                    (arglist-intro . +)     ; Guessed value
                    (block-close . 0)       ; Guessed value
                    (brace-list-close . 0)  ; Guessed value
                    (brace-list-entry . 0)  ; Guessed value
                    (brace-list-intro . +)  ; Guessed value
                    (brace-list-open . 0)   ; Guessed value
                    (case-label . +)        ; Guessed value
                    (class-close . 0)       ; Guessed value
                    (class-open . 0)        ; Guessed value
                    (defun-block-intro . +) ; Guessed value
                    (defun-close . 0)       ; Guessed value
                    (defun-open . 0)        ; Guessed value
                    (else-clause . 0)       ; Guessed value
                    (inclass . +)           ; Guessed value
                    (statement . 0)             ; Guessed value
                    (statement-block-intro . +) ; Guessed value
                    (statement-case-intro . +) ; Guessed value
                    (statement-cont . +)    ; Guessed value
                    (substatement . +)      ; Guessed value
                    (substatement-open . 0) ; Guessed value
                    (topmost-intro . 0)     ; Guessed value
                    (topmost-intro-cont . 0) ; Guessed value
                    (access-label . -)
                    (annotation-top-cont . 0)
                    (annotation-var-cont . +)
                    (arglist-close . c-lineup-close-paren)
                    (arglist-cont-nonempty . c-lineup-arglist)
                    (block-open . 0)
                    (brace-entry-open . 0)
                    (c . c-lineup-C-comments)
                    (catch-clause . 0)
                    (comment-intro . c-lineup-comment)
                    (composition-close . 0)
                    (composition-open . 0)
                    (cpp-define-intro c-lineup-cpp-define +)
                    (cpp-macro . -1000)
                    (cpp-macro-cont . +)
                    (do-while-closure . 0)
                    (extern-lang-close . 0)
                    (extern-lang-open . 0)
                    (friend . 0)
                    (func-decl-cont . +)
                    (incomposition . +)
                    (inexpr-class . +)
                    (inexpr-statement . +)
                    (inextern-lang . +)
                    (inher-cont . c-lineup-multi-inher)
                    (inher-intro . +)
                    (inlambda . c-lineup-inexpr-block)
                    (inline-close . 0)
                    (inline-open . +)
                    (inmodule . +)
                    (innamespace . +)
                    (knr-argdecl . 0)
                    (knr-argdecl-intro . +)
                    (label . 2)
                    (lambda-intro-cont . +)
                    (member-init-cont . c-lineup-multi-inher)
                    (member-init-intro . +)
                    (module-close . 0)
                    (module-open . 0)
                    (namespace-close . 0)
                    (namespace-open . 0)
                    (objc-method-args-cont . c-lineup-ObjC-method-args)
                    (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                    (objc-method-intro .
                                       [0])
                    (statement-case-open . 0)
                    (stream-op . c-lineup-streamop)
                    (string . -1000)
                    (substatement-label . 2)
                    (template-args-cont c-lineup-template-args +))))
  
    (defun my-c-mode-hook ()
      (setq indent-tabs-mode nil)
      (c-set-style "std-style")
      (setq whitespace-style '(face trailing lines space-before-tab indentation space-after-tab))
      (whitespace-mode t)
                                          ;(add-hook 'before-save-hook 'whitespace-cleanup) This is still getting into the makefile before-save-hook????
      )
  
  
    (add-hook 'c-mode-common-hook 'my-c-mode-hook t)
    )
#+end_src
   
** Make modes
#+begin_src emacs-lisp
  (with-package make-mode
    (defun my-makefile-mode-hook()
      (remove-hook 'before-save-hook 'whitespace-cleanup)
      )
  
    (add-hook 'makefile-mode-hook 'my-makefile-mode-hook t)
    (add-hook 'makefile-gmake-mode-hook 'my-makefile-mode-hook t)
    (add-to-list 'auto-mode-alist '("\\.mak$" . makefile-gmake-mode))
    )
#+end_src

** Perl mode
#+begin_src emacs-lisp
  (with-package cperl-mode
    (defun my-perl-mode-hooks ()
      (setq cperl-indent-level 2)
      ;; (setq cperl-continued-statement-offset 0)
      (cperl-set-style "C++")
      ;; (setq cperl-auto-newline t)
      (setq font-lock-maximum-decoration 1)
      (set-face-foreground 'cperl-hash-face "sandy brown")
      (set-face-foreground 'cperl-array-face "olive drab")
      ;;RSF: Find ssmm-cleanup-buffer... (add-hook 'before-save-hook 'ssmm-cleanup-buffer)
      )
  
    (add-hook 'cperl-mode-hook 'my-perl-mode-hooks t)

    (define-key cperl-mode-map (kbd "RET") 'reindent-then-newline-and-indent)
    (define-key cperl-mode-map (kbd "C-M-h") 'backward-kill-word)
  
    (global-set-key (kbd "C-h P") 'perldoc)
  
    (add-to-list 'auto-mode-alist '("\\.p[lm]$" . cperl-mode))
    (add-to-list 'auto-mode-alist '("\\.pod$" . pod-mode))
    (add-to-list 'auto-mode-alist '("\\.tt$" . tt-mode))
    )
#+end_src

** Python mode
#+begin_src emacs-lisp
  (with-package (python-mode sphinx-doc)
    ;;(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
    ;;(add-to-list 'interpreter-mode-alist '("python" . python-mode))
    )
#+end_src

** Projectile
#+begin_src emacs-lisp
  (with-package* projectile
    (projectile-global-mode)
    )
#+end_src

** Smex
# #+begin_src emacs-lisp
#   (with-package* smex
#     (smex-initialize)
#     (global-set-key (kbd "M-x") 'smex)
#     ;;(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#     ;; This is your old M-x.
#     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#     )
# #+end_src
** undo-tree
#+BEGIN_SRC emacs-lisp
  (with-package* undo-tree
     (global-undo-tree-mode 1)
   )
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (with-package* (helm helm-descbinds helm-projectile)
    (require 'helm)
    (require 'helm-config)

    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match    t
          )

  ;; Go to my org project headings
    (setq programs-helm-source
          '((name . "Project topics")
          (candidates . ssmm-get-projects)
          (action . (lambda (candidate)
                    (switch-to-buffer (file-name-nondirectory ssmm-org-main-file))
                    (goto-char (point-min))
                    (search-forward candidate)))))


    (global-set-key (kbd "C-x c <f8>") (lambda () (interactive) (helm :sources '(programs-helm-source))))

  (global-set-key (kbd "C-x c g") 'helm-google)

    (helm-mode 1)
    )
#+END_SRC

** Expand-region
#+begin_src emacs-lisp
  (with-package* expand-region
    (global-set-key (kbd "C-=") 'er/expand-region)
    (global-set-key (kbd "C-c w") (make-repeatable-command 'er/expand-region))
    )
#+end_src

** Multiple cursors
Try using this instead of macros.

#+begin_src emacs-lisp
  (with-package* multiple-cursors
    (global-set-key (kbd "C-S-n") 'mc/mark-next-lines)
    (global-set-key (kbd "C-+") 'mc/mark-next-like-this)
    (global-set-key (kbd "C--") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-*") 'mc/mark-all-like-this))

#+end_src
** Magit, etc.
#+begin_src emacs-lisp
  (setq magit-last-seen-setup-instructions "1.4.0")
  (with-package* (magit git-gutter git-gutter-fringe)
    (global-set-key (kbd "C-x g") 'magit-status)
    )
#+end_src

** Key chord
#+begin_src emacs-lisp
  ;;(with-package* (key-chord ace-jump-mode)
  (with-package* (key-chord avy)
    (key-chord-mode 1)
  
    ;(key-chord-define-global "hj" 'ace-jump-line-mode)
    ;(key-chord-define-global "jk" 'ace-jump-mode)
    (key-chord-define-global "hj" 'avy-goto-word-or-subword-1)
    (key-chord-define-global "jk" 'ace-window)
    (key-chord-define-global "ji" (lambda () (interactive) (backward-char) (next-line)))
    (key-chord-define-global "JI" (lambda () (interactive) (backward-char) (next-line)))
    ;(key-chord-define-global "fj" 'ido-find-file)
    ;(key-chord-define-global "fk" 'ido-find-file-other-window)
    )
#+end_src

*** Ido

#+begin_src emacs-lisp
;  (with-package* ido
;    (setq ido-create-new-buffer (quote never)
;          ido-enable-flex-matching t
;          ido-enable-last-directory-history nil
;          ido-enable-region-endgexp nil
;          ido-max-directory-size 300000
;          ido-max-file-prompt-width 0.1
;          ido-use-filename-at-point (quote guess)
;          ido-use-url-at-point t
;          ido-use-virtual-buffers t)
;  
;    (defun ssmm/ido-find-file ()
;      "Switch to another file.
;  The default directory is set to the buffer directory."
;      (interactive)
;      (let* ((bname (buffer-file-name))
;             (dir (and bname (file-name-directory bname))))
;        (ido-file-internal ido-default-file-method nil dir nil nil nil 'ignore))
;      )
;  
;    (defun ssmm/ido-find-file-other-window ()
;      "Switch to another file and show it in another window.
;  The default directory is set to the buffer directory."
;      (interactive)
;      (let* ((bname (buffer-file-name))
;             (dir (and bname (file-name-directory bname))))
;        (ido-file-internal 'other-window 'find-file-other-window dir nil nil nil 'ignore))
;      )
;  
;    (global-set-key (kbd "C-x C-f") 'ssmm/ido-find-file)
;    (global-set-key (kbd "C-x 4 f") 'ssmm/ido-find-file-other-window)
;    ;;(global-set-key (kbd "C-c C-z C-f") 'ido-find-file)
;    ;;(global-set-key (kbd "C-c C-z 4 f") 'ido-find-file-other-window)
;  )  
#+end_src

*** Ediff

#+begin_src emacs-lisp
  (with-package* ediff
    ;;; From: http://compgroups.net/comp.emacs/emacsw32-diff-looking-for-a-way-to-lock-window-scr/368371
    ;;;_*======================================================================
    ;;;_* ediff configuration
    ;; split windows horizontally:
    ;;(setq ediff-split-window-function 'split-window-horizontally)
  
    ;; only hilight current diff:
    ;;(setq-default ediff-highlight-all-diffs 'nil)
  
    ;; turn off whitespace checking:
    ;;(setq ediff-diff-options "-w")
  
    ;; place the control window in the same frame as the ediff buffers
    ;; to switch from one to the other interactively, use the command
    ;; ediff-toggle-multiframe
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  
    ;; place the control window in a separate frame from the ediff buffers
    ;; Doesn't work in ratpoison!!!
    ;;(setq ediff-window-setup-function 'ediff-setup-windows-multiframe)
  
    ;; highlight changes to characters rather than whole words
    (setq ediff-forward-word-function 'forward-char)
    )
#+end_src

** Keywiz
#+begin_src emacs-lisp
  (with-package keywiz
        (set-face-attribute 'keywiz-command-face nil
                            :foreground "white"))
#+end_src
** Parens
#+begin_src emacs-lisp
  (with-package smartparens-config*
  )
#+end_src

** Multi-term
#+begin_src emacs-lisp
  (with-package* multi-term
    (push '("<home>" . other-frame) term-bind-key-alist)
  )
#+end_src
** Workgroups2
#+begin_src emacs-lisp
  (with-package* workgroups2
    (setq wg-session-load-on-start nil)
    (setq wg-remember-frame-for-each-wg t)
    (workgroups-mode 1)
  )
#+end_src

** Load user files
#+begin_src emacs-lisp
  (cl-flet ((sk-load (base)
           (let* ((path          (expand-file-name base config-dir))
                  (literate      (concat path ".org"))
                  (encrypted-org (concat path ".org.gpg"))
                  (plain         (concat path ".el"))
                  (encrypted-el  (concat path ".el.gpg")))
             (cond
              ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
              ((file-exists-p encrypted-el)  (load encrypted-el))
              ((file-exists-p literate)      (org-babel-load-file literate))
              ((file-exists-p plain)         (load plain)))))
         (remove-extension (name)
           (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
           (match-string 1 name)))
    (let ((elisp-dir (expand-file-name "src" config-dir))
          (user-dir (expand-file-name user-login-name config-dir))
          (user-local-dir (expand-file-name "~/.emacs-local"))
          )
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path)))
      ;; load system-specific config
      (sk-load (system-name))
      (message (format "sk-loading from %s" (system-name)))
      ;; load user-specific config
      (sk-load user-login-name)
      ;; load any files in the user's directory
      (when (file-exists-p user-dir)
        (add-to-list 'load-path user-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=)))
      (when (file-exists-p user-local-dir)
        (add-to-list 'load-path user-local-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-local-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=)))
      ))
#+end_src


** Last words
This is the last section to be run during startup.

#+begin_src emacs-lisp
  
  (server-start)

  (if (getenv "RATPOISON")
      (progn
       ;; No bindings that have C-t
       (define-key org-mode-map (kbd "C-c t") 'org-todo)
       ))
  ;;(sml/setup)
  
#+end_src


* Footnotes

[1] If you already have a directory at =~/.emacs.d= move it out of the
    way and put this there instead.
